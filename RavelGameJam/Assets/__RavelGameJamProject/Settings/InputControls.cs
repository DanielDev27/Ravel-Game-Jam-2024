//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/__RavelGameJamProject/Settings/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""PlayerInputs"",
            ""id"": ""29f9929a-b929-4d1f-b04a-0e28f26c4bc7"",
            ""actions"": [
                {
                    ""name"": ""space"",
                    ""type"": ""Button"",
                    ""id"": ""c9ba784d-99b2-40de-b70b-39374c42615d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftClick"",
                    ""type"": ""Button"",
                    ""id"": ""1c04430a-f3b8-4d3a-92fc-56f678b8e95f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightClick"",
                    ""type"": ""Button"",
                    ""id"": ""07bd44c4-834d-4938-a6ff-f4c6c4ce1c66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a49e3d2e-3c21-4e02-8606-fa46262353f5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c30f7c48-7df4-4d01-bac8-697149d7418a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6106c2f-cd22-470b-a2af-3db59c9fe954"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputs
        m_PlayerInputs = asset.FindActionMap("PlayerInputs", throwIfNotFound: true);
        m_PlayerInputs_space = m_PlayerInputs.FindAction("space", throwIfNotFound: true);
        m_PlayerInputs_leftClick = m_PlayerInputs.FindAction("leftClick", throwIfNotFound: true);
        m_PlayerInputs_rightClick = m_PlayerInputs.FindAction("rightClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputs
    private readonly InputActionMap m_PlayerInputs;
    private List<IPlayerInputsActions> m_PlayerInputsActionsCallbackInterfaces = new List<IPlayerInputsActions>();
    private readonly InputAction m_PlayerInputs_space;
    private readonly InputAction m_PlayerInputs_leftClick;
    private readonly InputAction m_PlayerInputs_rightClick;
    public struct PlayerInputsActions
    {
        private @InputControls m_Wrapper;
        public PlayerInputsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @space => m_Wrapper.m_PlayerInputs_space;
        public InputAction @leftClick => m_Wrapper.m_PlayerInputs_leftClick;
        public InputAction @rightClick => m_Wrapper.m_PlayerInputs_rightClick;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Add(instance);
            @space.started += instance.OnSpace;
            @space.performed += instance.OnSpace;
            @space.canceled += instance.OnSpace;
            @leftClick.started += instance.OnLeftClick;
            @leftClick.performed += instance.OnLeftClick;
            @leftClick.canceled += instance.OnLeftClick;
            @rightClick.started += instance.OnRightClick;
            @rightClick.performed += instance.OnRightClick;
            @rightClick.canceled += instance.OnRightClick;
        }

        private void UnregisterCallbacks(IPlayerInputsActions instance)
        {
            @space.started -= instance.OnSpace;
            @space.performed -= instance.OnSpace;
            @space.canceled -= instance.OnSpace;
            @leftClick.started -= instance.OnLeftClick;
            @leftClick.performed -= instance.OnLeftClick;
            @leftClick.canceled -= instance.OnLeftClick;
            @rightClick.started -= instance.OnRightClick;
            @rightClick.performed -= instance.OnRightClick;
            @rightClick.canceled -= instance.OnRightClick;
        }

        public void RemoveCallbacks(IPlayerInputsActions instance)
        {
            if (m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);
    public interface IPlayerInputsActions
    {
        void OnSpace(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
}
